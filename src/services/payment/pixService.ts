
import { Novel } from "@/lib/data/types";
import { PurchaseReceipt, PaymentMethod, PixDetails } from "@/lib/data/paymentTypes";

// Mock API for PIX payment generation
// In production, this would connect to a real bank API
export const generatePixPayment = async (
  amount: number,
  novelId: string,
  userId: string
): Promise<PixDetails> => {
  try {
    console.log(`Generating PIX payment of ${amount} for novel ${novelId}`);
    
    // Simulate API call to banking partner
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    // Generar um código PIX dinâmico (em produção, seria gerado pelo banco)
    const dynamicPixKey = generateDynamicPixKey(amount, novelId, userId);
    
    // Set expiration time for 30 minutes from now
    const expiresAt = new Date();
    expiresAt.setMinutes(expiresAt.getMinutes() + 30);
    
    return {
      key: dynamicPixKey,
      expiresAt: expiresAt.toISOString(),
      qrCodeImage: `https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=${encodeURIComponent(dynamicPixKey)}`,
      transactionId: `pix_${Date.now()}`
    };
  } catch (error) {
    console.error("Error generating PIX payment:", error);
    throw new Error("Failed to generate PIX payment");
  }
};

// Generate a dynamic PIX key
const generateDynamicPixKey = (amount: number, novelId: string, userId: string): string => {
  // In a real app, this would be generated by the bank API
  // This is a simplified version for demonstration
  const timestamp = Date.now().toString();
  const prefix = "00020126580014br.gov.bcb.pix0136";
  const email = "novelbook@example.com.br";
  const price = amount.toFixed(2).replace('.', '');
  const merchant = "NovelBook Shop";
  const city = "Sao Paulo";
  
  // Simulate a PIX code structure (this is not a real PIX code format)
  return `${prefix}${email}5204000053039${price}5802BR5913${merchant}6008${city}6304${timestamp.substring(0, 4)}`;
};

// Check PIX payment status
export const checkPixPaymentStatus = async (
  transactionId: string
): Promise<{ status: "pending" | "completed" | "expired" | "failed", message: string }> => {
  try {
    console.log(`Checking PIX payment status for transaction ${transactionId}`);
    
    // Simulate API call to check payment status
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // For demonstration, randomly determine if payment is completed
    // In a real app, this would check with the bank API
    const randomStatus = Math.random();
    
    if (randomStatus > 0.7) {
      return { status: "completed", message: "Payment received" };
    } else if (randomStatus > 0.4) {
      return { status: "pending", message: "Payment not yet received" };
    } else if (randomStatus > 0.1) {
      return { status: "expired", message: "Payment time expired" };
    } else {
      return { status: "failed", message: "Payment failed" };
    }
  } catch (error) {
    console.error("Error checking PIX payment status:", error);
    throw new Error("Failed to check payment status");
  }
};

// Handle PIX webhook (in production would be implemented on backend)
export const handlePixWebhook = async (event: any) => {
  // In a real application, this would be processed by your backend
  console.log("Processing PIX webhook event:", event);
  
  switch (event.type) {
    case "pix.received":
      // Handle completed payment
      return { success: true, status: "payment_received" };
      
    case "pix.expired":
      // Handle expired payment
      return { success: false, status: "payment_expired" };
      
    default:
      // Handle other event types
      return { success: true, status: "event_received" };
  }
};

// Generate receipt after successful PIX payment
export const generatePixReceipt = (
  novel: Novel,
  transactionId: string,
  userId: string
): PurchaseReceipt => {
  return {
    id: transactionId,
    userId: userId,
    novelId: novel.id,
    title: novel.title,
    price: novel.price || 0,
    purchaseDate: new Date().toISOString(),
    paymentMethod: "pix" as PaymentMethod,
    paymentStatus: "completed"
  };
};
